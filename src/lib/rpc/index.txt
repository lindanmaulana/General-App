
-- GET TOTAL CASH
-- SQL Editor di Supabase
CREATE OR REPLACE FUNCTION get_total_cash()
RETURNS decimal AS $$
BEGIN
  RETURN (
    SELECT COALESCE(SUM(i.amount), 0) FROM incomes i
    JOIN fund_accounts fa ON i.fund_account_id = fa.id
    WHERE fa.type = 'CASH'
  ) - (
    SELECT COALESCE(SUM(e.amount), 0) FROM expenses e
    JOIN fund_accounts fa ON e.fund_account_id = fa.id
    WHERE fa.type = 'CASH'
  );
END;
$$ LANGUAGE plpgsql;

-- GET TOTAL NON CASH
-- SQL Editor di Supabase
CREATE OR REPLACE FUNCTION get_total_non_cash()
RETURNS decimal AS $$
BEGIN
  RETURN (
    -- Menjumlahkan semua income dari akun NON-KAS
    SELECT COALESCE(SUM(i.amount), 0) FROM incomes i
    JOIN fund_accounts fa ON i.fund_account_id = fa.id
    WHERE fa.type != 'CASH'
  ) - (
    -- Menjumlahkan semua expense dari akun NON-KAS
    SELECT COALESCE(SUM(e.amount), 0) FROM expenses e
    JOIN fund_accounts fa ON e.fund_account_id = fa.id
    WHERE fa.type != 'CASH'
  );
END;
$$ LANGUAGE plpgsql;

-- GET TOTAL BUDGET
-- SQL Editor di Supabase
CREATE OR REPLACE FUNCTION get_total_balance()
RETURNS decimal AS $$
BEGIN
  RETURN (
    SELECT COALESCE(SUM(amount), 0) FROM incomes
  ) - (
    SELECT COALESCE(SUM(amount), 0) FROM expenses
  );
END;
$$ LANGUAGE plpgsql;

-- GET TOTAL AMOUNT pada bulan dan tahun di get
CREATE OR REPLACE FUNCTION get_total_amount_this_month()
RETURNS decimal AS $$
DECLARE
    total_income_amount decimal;
BEGIN
    -- Menjumlahkan total amount dari tabel incomes di bulan ini
    SELECT COALESCE(SUM(amount), 0) INTO total_income_amount FROM incomes
    WHERE EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM NOW())
    AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM NOW());

    RETURN total_income_amount;
END;
$$ LANGUAGE plpgsql;


-- GET TOTAL INCOMES pada bulan dan tahun ini
create or replace function get_total_incomes_this_month()
returns numeric
language sql
as $$
  select coalesce(sum(amount), 0) as total
  from incomes
  where date >= date_trunc('month', now())::date
    and date < (date_trunc('month', now()) + interval '1 month')::date;
$$;

-- GET TOTAL EXPENSES pada bulan dan tahun ini
create or replace function get_total_expenses_this_month()
returns numeric
language sql
as $$
  select coalesce(sum(amount), 0) as total
  from expenses
  where date >= date_trunc('month', now())::date
    and date < (date_trunc('month', now()) + interval '1 month')::date;
$$;


-- GET DATA KEUANGAN SEMUA / tahun
CREATE OR REPLACE FUNCTION get_monthly_financial_summary_by_year(target_year int)
RETURNS TABLE (
  month text,
  incomes decimal,
  expenses decimal,
  balance decimal
) AS $$
BEGIN
  RETURN QUERY
  WITH monthly_incomes AS (
    SELECT
      EXTRACT(YEAR FROM date) AS year_num,
      EXTRACT(MONTH FROM date) AS month_num,
      SUM(amount) AS income
    FROM incomes
    WHERE EXTRACT(YEAR FROM date) = target_year
    GROUP BY year_num, month_num
  ),
  monthly_expenses AS (
    SELECT
      EXTRACT(YEAR FROM date) AS year_num,
      EXTRACT(MONTH FROM date) AS month_num,
      SUM(amount) AS expense
    FROM expenses
    WHERE EXTRACT(YEAR FROM date) = target_year
    GROUP BY year_num, month_num
  )
  SELECT
    TO_CHAR(make_date(2000, COALESCE(i.month_num, e.month_num), 1), 'Mon') AS month,
    COALESCE(i.income, 0) AS pemasukan,
    COALESCE(e.expense, 0) AS pengeluaran,
    COALESCE(i.income, 0) - COALESCE(e.expense, 0) AS saldo
  FROM monthly_incomes i
  FULL OUTER JOIN monthly_expenses e ON i.month_num = e.month_num AND i.year_num = e.year_num
  ORDER BY COALESCE(i.month_num, e.month_num);

END;
$$ LANGUAGE plpgsql;